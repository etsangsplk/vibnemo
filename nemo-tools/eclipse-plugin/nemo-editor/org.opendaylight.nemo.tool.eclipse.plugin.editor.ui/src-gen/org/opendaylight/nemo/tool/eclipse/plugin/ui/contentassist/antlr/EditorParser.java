/*
 * generated by Xtext
 */
package org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.opendaylight.nemo.tool.eclipse.plugin.services.EditorGrammarAccess;

public class EditorParser extends AbstractContentAssistParser {
	
	@Inject
	private EditorGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr.internal.InternalEditorParser createParser() {
		org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr.internal.InternalEditorParser result = new org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr.internal.InternalEditorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
					put(grammarAccess.getNodeOperatingAccess().getAlternatives_0(), "rule__NodeOperating__Alternatives_0");
					put(grammarAccess.getConnectionUpdateAccess().getAlternatives_0(), "rule__ConnectionUpdate__Alternatives_0");
					put(grammarAccess.getFlowUpdateAccess().getAlternatives_0(), "rule__FlowUpdate__Alternatives_0");
					put(grammarAccess.getOperationAccess().getAlternatives_8(), "rule__Operation__Alternatives_8");
					put(grammarAccess.getOnePropertyAccess().getAlternatives_2(), "rule__OneProperty__Alternatives_2");
					put(grammarAccess.getOneModelPropertyAccess().getAlternatives_0(), "rule__OneModelProperty__Alternatives_0");
					put(grammarAccess.getNewObjAccess().getAlternatives(), "rule__NewObj__Alternatives");
					put(grammarAccess.getSenEnginesAccess().getGroup(), "rule__SenEngines__Group__0");
					put(grammarAccess.getSenEnginesAccess().getGroup_2(), "rule__SenEngines__Group_2__0");
					put(grammarAccess.getIpv4Access().getGroup(), "rule__Ipv4__Group__0");
					put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_3(), "rule__Node__Group_3__0");
					put(grammarAccess.getNodeAccess().getGroup_4(), "rule__Node__Group_4__0");
					put(grammarAccess.getNodeAccess().getGroup_4_2(), "rule__Node__Group_4_2__0");
					put(grammarAccess.getNodeModelAccess().getGroup(), "rule__NodeModel__Group__0");
					put(grammarAccess.getNodeOperatingAccess().getGroup(), "rule__NodeOperating__Group__0");
					put(grammarAccess.getNodeOperatingAccess().getGroup_3(), "rule__NodeOperating__Group_3__0");
					put(grammarAccess.getNodeOperatingAccess().getGroup_4(), "rule__NodeOperating__Group_4__0");
					put(grammarAccess.getNodeOperatingAccess().getGroup_4_2(), "rule__NodeOperating__Group_4_2__0");
					put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
					put(grammarAccess.getConnectionAccess().getGroup_5(), "rule__Connection__Group_5__0");
					put(grammarAccess.getConnectionAccess().getGroup_5_2(), "rule__Connection__Group_5_2__0");
					put(grammarAccess.getConnectionUpdateAccess().getGroup(), "rule__ConnectionUpdate__Group__0");
					put(grammarAccess.getConnectionUpdateAccess().getGroup_3(), "rule__ConnectionUpdate__Group_3__0");
					put(grammarAccess.getConnectionUpdateAccess().getGroup_4(), "rule__ConnectionUpdate__Group_4__0");
					put(grammarAccess.getConnectionUpdateAccess().getGroup_4_2(), "rule__ConnectionUpdate__Group_4_2__0");
					put(grammarAccess.getFlowAccess().getGroup(), "rule__Flow__Group__0");
					put(grammarAccess.getFlowUpdateAccess().getGroup(), "rule__FlowUpdate__Group__0");
					put(grammarAccess.getMatchesAccess().getGroup(), "rule__Matches__Group__0");
					put(grammarAccess.getMatchesAccess().getGroup_2(), "rule__Matches__Group_2__0");
					put(grammarAccess.getMatchAccess().getGroup(), "rule__Match__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_3(), "rule__Operation__Group_3__0");
					put(grammarAccess.getOperationAccess().getGroup_8_1(), "rule__Operation__Group_8_1__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup_2(), "rule__Condition__Group_2__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_2(), "rule__Property__Group_2__0");
					put(grammarAccess.getOnePropertyAccess().getGroup(), "rule__OneProperty__Group__0");
					put(grammarAccess.getModelPropertyAccess().getGroup(), "rule__ModelProperty__Group__0");
					put(grammarAccess.getModelPropertyAccess().getGroup_2(), "rule__ModelProperty__Group_2__0");
					put(grammarAccess.getOneModelPropertyAccess().getGroup(), "rule__OneModelProperty__Group__0");
					put(grammarAccess.getModelAccess().getSentencesAssignment(), "rule__Model__SentencesAssignment");
					put(grammarAccess.getNodeAccess().getNameAssignment_2(), "rule__Node__NameAssignment_2");
					put(grammarAccess.getNodeAccess().getNodesAssignment_4_1(), "rule__Node__NodesAssignment_4_1");
					put(grammarAccess.getNodeAccess().getNodesAssignment_4_2_1(), "rule__Node__NodesAssignment_4_2_1");
					put(grammarAccess.getNodeModelAccess().getNameAssignment_1(), "rule__NodeModel__NameAssignment_1");
					put(grammarAccess.getNodeOperatingAccess().getNodenameAssignment_2(), "rule__NodeOperating__NodenameAssignment_2");
					put(grammarAccess.getNodeOperatingAccess().getNodesAssignment_4_1(), "rule__NodeOperating__NodesAssignment_4_1");
					put(grammarAccess.getNodeOperatingAccess().getNodesAssignment_4_2_1(), "rule__NodeOperating__NodesAssignment_4_2_1");
					put(grammarAccess.getConnectionAccess().getNameAssignment_2(), "rule__Connection__NameAssignment_2");
					put(grammarAccess.getConnectionAccess().getEndnodeAssignment_5_1(), "rule__Connection__EndnodeAssignment_5_1");
					put(grammarAccess.getConnectionAccess().getEndnodeAssignment_5_2_1(), "rule__Connection__EndnodeAssignment_5_2_1");
					put(grammarAccess.getConnectionUpdateAccess().getConnectionnameAssignment_2(), "rule__ConnectionUpdate__ConnectionnameAssignment_2");
					put(grammarAccess.getConnectionUpdateAccess().getEndnodeAssignment_4_1(), "rule__ConnectionUpdate__EndnodeAssignment_4_1");
					put(grammarAccess.getConnectionUpdateAccess().getEndnodeAssignment_4_2_1(), "rule__ConnectionUpdate__EndnodeAssignment_4_2_1");
					put(grammarAccess.getFlowAccess().getNameAssignment_2(), "rule__Flow__NameAssignment_2");
					put(grammarAccess.getFlowUpdateAccess().getFlowIdAssignment_2(), "rule__FlowUpdate__FlowIdAssignment_2");
					put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
					put(grammarAccess.getOperationAccess().getValueAssignment_3_1(), "rule__Operation__ValueAssignment_3_1");
					put(grammarAccess.getOperationAccess().getTargetIdAssignment_5(), "rule__Operation__TargetIdAssignment_5");
					put(grammarAccess.getOperationAccess().getTargetNodeAssignment_8_1_2(), "rule__Operation__TargetNodeAssignment_8_1_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr.internal.InternalEditorParser typedParser = (org.opendaylight.nemo.tool.eclipse.plugin.ui.contentassist.antlr.internal.InternalEditorParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EditorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EditorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
