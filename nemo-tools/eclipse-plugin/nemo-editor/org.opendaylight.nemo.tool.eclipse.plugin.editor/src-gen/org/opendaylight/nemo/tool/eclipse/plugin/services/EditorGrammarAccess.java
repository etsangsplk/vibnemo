/*
 * generated by Xtext
 */
package org.opendaylight.nemo.tool.eclipse.plugin.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cSentencesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSentencesSentenceParserRuleCall_0 = (RuleCall)cSentencesAssignment.eContents().get(0);
		
		//Model:
		//	sentences+=Sentence*;
		@Override public ParserRule getRule() { return rule; }

		//sentences+=Sentence*
		public Assignment getSentencesAssignment() { return cSentencesAssignment; }

		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_0() { return cSentencesSentenceParserRuleCall_0; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSenEnginesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUserParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNodeOperatingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConnectionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConnectionUpdateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFlowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFlowUpdateParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOperationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Sentence:
		//	SenEngines | User | Node | NodeOperating | Connection | ConnectionUpdate | Flow | FlowUpdate | Operation;
		@Override public ParserRule getRule() { return rule; }

		//SenEngines | User | Node | NodeOperating | Connection | ConnectionUpdate | Flow | FlowUpdate | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//SenEngines
		public RuleCall getSenEnginesParserRuleCall_0() { return cSenEnginesParserRuleCall_0; }

		//User
		public RuleCall getUserParserRuleCall_1() { return cUserParserRuleCall_1; }

		//Node
		public RuleCall getNodeParserRuleCall_2() { return cNodeParserRuleCall_2; }

		//NodeOperating
		public RuleCall getNodeOperatingParserRuleCall_3() { return cNodeOperatingParserRuleCall_3; }

		//Connection
		public RuleCall getConnectionParserRuleCall_4() { return cConnectionParserRuleCall_4; }

		//ConnectionUpdate
		public RuleCall getConnectionUpdateParserRuleCall_5() { return cConnectionUpdateParserRuleCall_5; }

		//Flow
		public RuleCall getFlowParserRuleCall_6() { return cFlowParserRuleCall_6; }

		//FlowUpdate
		public RuleCall getFlowUpdateParserRuleCall_7() { return cFlowUpdateParserRuleCall_7; }

		//Operation
		public RuleCall getOperationParserRuleCall_8() { return cOperationParserRuleCall_8; }
	}

	public class SenEnginesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SenEngines");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnginesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIpv4ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIpv4ParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Engines sentence
		//SenEngines:
		//	"Engines:" Ipv4 ("," Ipv4)* ";";
		@Override public ParserRule getRule() { return rule; }

		//"Engines:" Ipv4 ("," Ipv4)* ";"
		public Group getGroup() { return cGroup; }

		//"Engines:"
		public Keyword getEnginesKeyword_0() { return cEnginesKeyword_0; }

		//Ipv4
		public RuleCall getIpv4ParserRuleCall_1() { return cIpv4ParserRuleCall_1; }

		//("," Ipv4)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//Ipv4
		public RuleCall getIpv4ParserRuleCall_2_1() { return cIpv4ParserRuleCall_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class Ipv4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ipv4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIPV4_SUBTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIPV4_SUBTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIPV4_SUBTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cIPV4_SUBTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Ipv4:
		//	IPV4_SUB "." IPV4_SUB "." IPV4_SUB "." IPV4_SUB;
		@Override public ParserRule getRule() { return rule; }

		//IPV4_SUB "." IPV4_SUB "." IPV4_SUB "." IPV4_SUB
		public Group getGroup() { return cGroup; }

		//IPV4_SUB
		public RuleCall getIPV4_SUBTerminalRuleCall_0() { return cIPV4_SUBTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//IPV4_SUB
		public RuleCall getIPV4_SUBTerminalRuleCall_2() { return cIPV4_SUBTerminalRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//IPV4_SUB
		public RuleCall getIPV4_SUBTerminalRuleCall_4() { return cIPV4_SUBTerminalRuleCall_4; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//IPV4_SUB
		public RuleCall getIPV4_SUBTerminalRuleCall_6() { return cIPV4_SUBTerminalRuleCall_6; }
	}

	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////User
		//User:
		//	"CREATE" STRING STRING STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"CREATE" STRING STRING STRING ";"
		public Group getGroup() { return cGroup; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNewObjParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNemoIdTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cNemoIdTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContainKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNodesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cNodesNodeCrossReference_4_1_0 = (CrossReference)cNodesAssignment_4_1.eContents().get(0);
		private final RuleCall cNodesNodeNemoIdTerminalRuleCall_4_1_0_1 = (RuleCall)cNodesNodeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cNodesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cNodesNodeCrossReference_4_2_1_0 = (CrossReference)cNodesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1 = (RuleCall)cNodesNodeCrossReference_4_2_1_0.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//////Node
		//Node:
		//	NewObj "Node" name=NemoId ("Type" NemoId) ("Contain" nodes+=[Node|NemoId] ("," nodes+=[Node|NemoId])*)? Property? ";";
		@Override public ParserRule getRule() { return rule; }

		//NewObj "Node" name=NemoId ("Type" NemoId) ("Contain" nodes+=[Node|NemoId] ("," nodes+=[Node|NemoId])*)? Property? ";"
		public Group getGroup() { return cGroup; }

		//NewObj
		public RuleCall getNewObjParserRuleCall_0() { return cNewObjParserRuleCall_0; }

		//"Node"
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }

		//name=NemoId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//NemoId
		public RuleCall getNameNemoIdTerminalRuleCall_2_0() { return cNameNemoIdTerminalRuleCall_2_0; }

		//"Type" NemoId
		public Group getGroup_3() { return cGroup_3; }

		//"Type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_3_1() { return cNemoIdTerminalRuleCall_3_1; }

		//("Contain" nodes+=[Node|NemoId] ("," nodes+=[Node|NemoId])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Contain"
		public Keyword getContainKeyword_4_0() { return cContainKeyword_4_0; }

		//nodes+=[Node|NemoId]
		public Assignment getNodesAssignment_4_1() { return cNodesAssignment_4_1; }

		//[Node|NemoId]
		public CrossReference getNodesNodeCrossReference_4_1_0() { return cNodesNodeCrossReference_4_1_0; }

		//NemoId
		public RuleCall getNodesNodeNemoIdTerminalRuleCall_4_1_0_1() { return cNodesNodeNemoIdTerminalRuleCall_4_1_0_1; }

		//("," nodes+=[Node|NemoId])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//nodes+=[Node|NemoId]
		public Assignment getNodesAssignment_4_2_1() { return cNodesAssignment_4_2_1; }

		//[Node|NemoId]
		public CrossReference getNodesNodeCrossReference_4_2_1_0() { return cNodesNodeCrossReference_4_2_1_0; }

		//NemoId
		public RuleCall getNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1() { return cNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1; }

		//Property?
		public RuleCall getPropertyParserRuleCall_5() { return cPropertyParserRuleCall_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class NodeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNemoIdTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cModelPropertyParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////NodeModel
		//NodeModel:
		//	"NodeModel" name=NemoId ModelProperty?;
		@Override public ParserRule getRule() { return rule; }

		//"NodeModel" name=NemoId ModelProperty?
		public Group getGroup() { return cGroup; }

		//"NodeModel"
		public Keyword getNodeModelKeyword_0() { return cNodeModelKeyword_0; }

		//name=NemoId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//NemoId
		public RuleCall getNameNemoIdTerminalRuleCall_1_0() { return cNameNemoIdTerminalRuleCall_1_0; }

		//ModelProperty?
		public RuleCall getModelPropertyParserRuleCall_2() { return cModelPropertyParserRuleCall_2; }
	}

	public class NodeOperatingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeOperating");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUPDATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDELETEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodenameNodeCrossReference_2_0 = (CrossReference)cNodenameAssignment_2.eContents().get(0);
		private final RuleCall cNodenameNodeNemoIdTerminalRuleCall_2_0_1 = (RuleCall)cNodenameNodeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cNemoIdTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContainKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNodesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cNodesNodeCrossReference_4_1_0 = (CrossReference)cNodesAssignment_4_1.eContents().get(0);
		private final RuleCall cNodesNodeNemoIdTerminalRuleCall_4_1_0_1 = (RuleCall)cNodesNodeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cNodesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cNodesNodeCrossReference_4_2_1_0 = (CrossReference)cNodesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1 = (RuleCall)cNodesNodeCrossReference_4_2_1_0.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeOperating:
		//	("UPDATE" | "DELETE") "Node" nodename+=[Node|NemoId] ("Type" NemoId)? ("Contain" nodes+=[Node|NemoId] (","
		//	nodes+=[Node|NemoId])*)? Property? ";";
		@Override public ParserRule getRule() { return rule; }

		//("UPDATE" | "DELETE") "Node" nodename+=[Node|NemoId] ("Type" NemoId)? ("Contain" nodes+=[Node|NemoId] (","
		//nodes+=[Node|NemoId])*)? Property? ";"
		public Group getGroup() { return cGroup; }

		//"UPDATE" | "DELETE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"UPDATE"
		public Keyword getUPDATEKeyword_0_0() { return cUPDATEKeyword_0_0; }

		//"DELETE"
		public Keyword getDELETEKeyword_0_1() { return cDELETEKeyword_0_1; }

		//"Node"
		public Keyword getNodeKeyword_1() { return cNodeKeyword_1; }

		//nodename+=[Node|NemoId]
		public Assignment getNodenameAssignment_2() { return cNodenameAssignment_2; }

		//[Node|NemoId]
		public CrossReference getNodenameNodeCrossReference_2_0() { return cNodenameNodeCrossReference_2_0; }

		//NemoId
		public RuleCall getNodenameNodeNemoIdTerminalRuleCall_2_0_1() { return cNodenameNodeNemoIdTerminalRuleCall_2_0_1; }

		//("Type" NemoId)?
		public Group getGroup_3() { return cGroup_3; }

		//"Type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_3_1() { return cNemoIdTerminalRuleCall_3_1; }

		//("Contain" nodes+=[Node|NemoId] ("," nodes+=[Node|NemoId])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Contain"
		public Keyword getContainKeyword_4_0() { return cContainKeyword_4_0; }

		//nodes+=[Node|NemoId]
		public Assignment getNodesAssignment_4_1() { return cNodesAssignment_4_1; }

		//[Node|NemoId]
		public CrossReference getNodesNodeCrossReference_4_1_0() { return cNodesNodeCrossReference_4_1_0; }

		//NemoId
		public RuleCall getNodesNodeNemoIdTerminalRuleCall_4_1_0_1() { return cNodesNodeNemoIdTerminalRuleCall_4_1_0_1; }

		//("," nodes+=[Node|NemoId])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//nodes+=[Node|NemoId]
		public Assignment getNodesAssignment_4_2_1() { return cNodesAssignment_4_2_1; }

		//[Node|NemoId]
		public CrossReference getNodesNodeCrossReference_4_2_1_0() { return cNodesNodeCrossReference_4_2_1_0; }

		//NemoId
		public RuleCall getNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1() { return cNodesNodeNemoIdTerminalRuleCall_4_2_1_0_1; }

		//Property?
		public RuleCall getPropertyParserRuleCall_5() { return cPropertyParserRuleCall_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNemoIdTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNemoIdTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEndnodesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEndnodeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cEndnodeNodeCrossReference_5_1_0 = (CrossReference)cEndnodeAssignment_5_1.eContents().get(0);
		private final RuleCall cEndnodeNodeNemoIdTerminalRuleCall_5_1_0_1 = (RuleCall)cEndnodeNodeCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cEndnodeAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cEndnodeNodeCrossReference_5_2_1_0 = (CrossReference)cEndnodeAssignment_5_2_1.eContents().get(0);
		private final RuleCall cEndnodeNodeNemoIdTerminalRuleCall_5_2_1_0_1 = (RuleCall)cEndnodeNodeCrossReference_5_2_1_0.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Connection
		//Connection:
		//	"CREATE" "Connection" name=NemoId "Type" NemoId ("Endnodes" endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)
		//	Property? ";";
		@Override public ParserRule getRule() { return rule; }

		//"CREATE" "Connection" name=NemoId "Type" NemoId ("Endnodes" endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)
		//Property? ";"
		public Group getGroup() { return cGroup; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		//"Connection"
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }

		//name=NemoId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//NemoId
		public RuleCall getNameNemoIdTerminalRuleCall_2_0() { return cNameNemoIdTerminalRuleCall_2_0; }

		//"Type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_4() { return cNemoIdTerminalRuleCall_4; }

		//"Endnodes" endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*
		public Group getGroup_5() { return cGroup_5; }

		//"Endnodes"
		public Keyword getEndnodesKeyword_5_0() { return cEndnodesKeyword_5_0; }

		//endnode+=[Node|NemoId]
		public Assignment getEndnodeAssignment_5_1() { return cEndnodeAssignment_5_1; }

		//[Node|NemoId]
		public CrossReference getEndnodeNodeCrossReference_5_1_0() { return cEndnodeNodeCrossReference_5_1_0; }

		//NemoId
		public RuleCall getEndnodeNodeNemoIdTerminalRuleCall_5_1_0_1() { return cEndnodeNodeNemoIdTerminalRuleCall_5_1_0_1; }

		//("," endnode+=[Node|NemoId])*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//endnode+=[Node|NemoId]
		public Assignment getEndnodeAssignment_5_2_1() { return cEndnodeAssignment_5_2_1; }

		//[Node|NemoId]
		public CrossReference getEndnodeNodeCrossReference_5_2_1_0() { return cEndnodeNodeCrossReference_5_2_1_0; }

		//NemoId
		public RuleCall getEndnodeNodeNemoIdTerminalRuleCall_5_2_1_0_1() { return cEndnodeNodeNemoIdTerminalRuleCall_5_2_1_0_1; }

		//Property?
		public RuleCall getPropertyParserRuleCall_6() { return cPropertyParserRuleCall_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ConnectionUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUPDATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDELETEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConnectionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConnectionnameConnectionCrossReference_2_0 = (CrossReference)cConnectionnameAssignment_2.eContents().get(0);
		private final RuleCall cConnectionnameConnectionNemoIdTerminalRuleCall_2_0_1 = (RuleCall)cConnectionnameConnectionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cNemoIdTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEndnodesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEndnodeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEndnodeNodeCrossReference_4_1_0 = (CrossReference)cEndnodeAssignment_4_1.eContents().get(0);
		private final RuleCall cEndnodeNodeNemoIdTerminalRuleCall_4_1_0_1 = (RuleCall)cEndnodeNodeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEndnodeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cEndnodeNodeCrossReference_4_2_1_0 = (CrossReference)cEndnodeAssignment_4_2_1.eContents().get(0);
		private final RuleCall cEndnodeNodeNemoIdTerminalRuleCall_4_2_1_0_1 = (RuleCall)cEndnodeNodeCrossReference_4_2_1_0.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Connection operating
		//ConnectionUpdate:
		//	("UPDATE" | "DELETE") "Connection" connectionname+=[Connection|NemoId] ("Type" NemoId)? ("Endnodes"
		//	endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)? Property? ";";
		@Override public ParserRule getRule() { return rule; }

		//("UPDATE" | "DELETE") "Connection" connectionname+=[Connection|NemoId] ("Type" NemoId)? ("Endnodes"
		//endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)? Property? ";"
		public Group getGroup() { return cGroup; }

		//"UPDATE" | "DELETE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"UPDATE"
		public Keyword getUPDATEKeyword_0_0() { return cUPDATEKeyword_0_0; }

		//"DELETE"
		public Keyword getDELETEKeyword_0_1() { return cDELETEKeyword_0_1; }

		//"Connection"
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }

		//connectionname+=[Connection|NemoId]
		public Assignment getConnectionnameAssignment_2() { return cConnectionnameAssignment_2; }

		//[Connection|NemoId]
		public CrossReference getConnectionnameConnectionCrossReference_2_0() { return cConnectionnameConnectionCrossReference_2_0; }

		//NemoId
		public RuleCall getConnectionnameConnectionNemoIdTerminalRuleCall_2_0_1() { return cConnectionnameConnectionNemoIdTerminalRuleCall_2_0_1; }

		//("Type" NemoId)?
		public Group getGroup_3() { return cGroup_3; }

		//"Type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_3_1() { return cNemoIdTerminalRuleCall_3_1; }

		//("Endnodes" endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Endnodes"
		public Keyword getEndnodesKeyword_4_0() { return cEndnodesKeyword_4_0; }

		//endnode+=[Node|NemoId]
		public Assignment getEndnodeAssignment_4_1() { return cEndnodeAssignment_4_1; }

		//[Node|NemoId]
		public CrossReference getEndnodeNodeCrossReference_4_1_0() { return cEndnodeNodeCrossReference_4_1_0; }

		//NemoId
		public RuleCall getEndnodeNodeNemoIdTerminalRuleCall_4_1_0_1() { return cEndnodeNodeNemoIdTerminalRuleCall_4_1_0_1; }

		//("," endnode+=[Node|NemoId])*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//endnode+=[Node|NemoId]
		public Assignment getEndnodeAssignment_4_2_1() { return cEndnodeAssignment_4_2_1; }

		//[Node|NemoId]
		public CrossReference getEndnodeNodeCrossReference_4_2_1_0() { return cEndnodeNodeCrossReference_4_2_1_0; }

		//NemoId
		public RuleCall getEndnodeNodeNemoIdTerminalRuleCall_4_2_1_0_1() { return cEndnodeNodeNemoIdTerminalRuleCall_4_2_1_0_1; }

		//Property?
		public RuleCall getPropertyParserRuleCall_5() { return cPropertyParserRuleCall_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNemoIdTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cMatchesParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////flow
		//Flow:
		//	"CREATE" "Flow" name=NemoId Matches? ";";
		@Override public ParserRule getRule() { return rule; }

		//"CREATE" "Flow" name=NemoId Matches? ";"
		public Group getGroup() { return cGroup; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		//"Flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//name=NemoId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//NemoId
		public RuleCall getNameNemoIdTerminalRuleCall_2_0() { return cNameNemoIdTerminalRuleCall_2_0; }

		//Matches?
		public RuleCall getMatchesParserRuleCall_3() { return cMatchesParserRuleCall_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FlowUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUPDATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDELETEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFlowIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFlowIdFlowCrossReference_2_0 = (CrossReference)cFlowIdAssignment_2.eContents().get(0);
		private final RuleCall cFlowIdFlowNemoIdTerminalRuleCall_2_0_1 = (RuleCall)cFlowIdFlowCrossReference_2_0.eContents().get(1);
		private final RuleCall cMatchesParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FlowUpdate:
		//	("UPDATE" | "DELETE") "Flow" flowId+=[Flow|NemoId] Matches? ";";
		@Override public ParserRule getRule() { return rule; }

		//("UPDATE" | "DELETE") "Flow" flowId+=[Flow|NemoId] Matches? ";"
		public Group getGroup() { return cGroup; }

		//"UPDATE" | "DELETE"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"UPDATE"
		public Keyword getUPDATEKeyword_0_0() { return cUPDATEKeyword_0_0; }

		//"DELETE"
		public Keyword getDELETEKeyword_0_1() { return cDELETEKeyword_0_1; }

		//"Flow"
		public Keyword getFlowKeyword_1() { return cFlowKeyword_1; }

		//flowId+=[Flow|NemoId]
		public Assignment getFlowIdAssignment_2() { return cFlowIdAssignment_2; }

		//[Flow|NemoId]
		public CrossReference getFlowIdFlowCrossReference_2_0() { return cFlowIdFlowCrossReference_2_0; }

		//NemoId
		public RuleCall getFlowIdFlowNemoIdTerminalRuleCall_2_0_1() { return cFlowIdFlowNemoIdTerminalRuleCall_2_0_1; }

		//Matches?
		public RuleCall getMatchesParserRuleCall_3() { return cMatchesParserRuleCall_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MatchesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matches");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cMatchParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cMatchParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Matches:
		//	"Match" Match ("," Match)*;
		@Override public ParserRule getRule() { return rule; }

		//"Match" Match ("," Match)*
		public Group getGroup() { return cGroup; }

		//"Match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//Match
		public RuleCall getMatchParserRuleCall_1() { return cMatchParserRuleCall_1; }

		//("," Match)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//Match
		public RuleCall getMatchParserRuleCall_2_1() { return cMatchParserRuleCall_2_1; }
	}

	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Match");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNemoIdTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Match:
		//	NemoId ":" STRING;
		@Override public ParserRule getRule() { return rule; }

		//NemoId ":" STRING
		public Group getGroup() { return cGroup; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_0() { return cNemoIdTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNemoIdTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPriorityKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cTargetKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetIdFlowCrossReference_5_0 = (CrossReference)cTargetIdAssignment_5.eContents().get(0);
		private final RuleCall cTargetIdFlowNemoIdTerminalRuleCall_5_0_1 = (RuleCall)cTargetIdFlowCrossReference_5_0.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cActionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final RuleCall cNemoIdTerminalRuleCall_8_0 = (RuleCall)cAlternatives_8.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final RuleCall cNemoIdTerminalRuleCall_8_1_0 = (RuleCall)cGroup_8_1.eContents().get(0);
		private final Keyword cColonKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Assignment cTargetNodeAssignment_8_1_2 = (Assignment)cGroup_8_1.eContents().get(2);
		private final CrossReference cTargetNodeNodeCrossReference_8_1_2_0 = (CrossReference)cTargetNodeAssignment_8_1_2.eContents().get(0);
		private final RuleCall cTargetNodeNodeNemoIdTerminalRuleCall_8_1_2_0_1 = (RuleCall)cTargetNodeNodeCrossReference_8_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Operation
		//Operation:
		//	"CREATE" "Operation" name=NemoId ("Priority" value+=INT)? "Target" targetId=[Flow|NemoId] Condition? "Action" (NemoId
		//	| NemoId ":" targetNode=[Node|NemoId]) ";";
		@Override public ParserRule getRule() { return rule; }

		//"CREATE" "Operation" name=NemoId ("Priority" value+=INT)? "Target" targetId=[Flow|NemoId] Condition? "Action" (NemoId |
		//NemoId ":" targetNode=[Node|NemoId]) ";"
		public Group getGroup() { return cGroup; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		//"Operation"
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }

		//name=NemoId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//NemoId
		public RuleCall getNameNemoIdTerminalRuleCall_2_0() { return cNameNemoIdTerminalRuleCall_2_0; }

		//("Priority" value+=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"Priority"
		public Keyword getPriorityKeyword_3_0() { return cPriorityKeyword_3_0; }

		//value+=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }

		//"Target"
		public Keyword getTargetKeyword_4() { return cTargetKeyword_4; }

		//targetId=[Flow|NemoId]
		public Assignment getTargetIdAssignment_5() { return cTargetIdAssignment_5; }

		//[Flow|NemoId]
		public CrossReference getTargetIdFlowCrossReference_5_0() { return cTargetIdFlowCrossReference_5_0; }

		//NemoId
		public RuleCall getTargetIdFlowNemoIdTerminalRuleCall_5_0_1() { return cTargetIdFlowNemoIdTerminalRuleCall_5_0_1; }

		//Condition?
		public RuleCall getConditionParserRuleCall_6() { return cConditionParserRuleCall_6; }

		//"Action"
		public Keyword getActionKeyword_7() { return cActionKeyword_7; }

		//NemoId | NemoId ":" targetNode=[Node|NemoId]
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_8_0() { return cNemoIdTerminalRuleCall_8_0; }

		//NemoId ":" targetNode=[Node|NemoId]
		public Group getGroup_8_1() { return cGroup_8_1; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_8_1_0() { return cNemoIdTerminalRuleCall_8_1_0; }

		//":"
		public Keyword getColonKeyword_8_1_1() { return cColonKeyword_8_1_1; }

		//targetNode=[Node|NemoId]
		public Assignment getTargetNodeAssignment_8_1_2() { return cTargetNodeAssignment_8_1_2; }

		//[Node|NemoId]
		public CrossReference getTargetNodeNodeCrossReference_8_1_2_0() { return cTargetNodeNodeCrossReference_8_1_2_0; }

		//NemoId
		public RuleCall getTargetNodeNodeNemoIdTerminalRuleCall_8_1_2_0_1() { return cTargetNodeNodeNemoIdTerminalRuleCall_8_1_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Condition:
		//	"Condition" STRING ("," STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//"Condition" STRING ("," STRING)*
		public Group getGroup() { return cGroup; }

		//"Condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//("," STRING)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOnePropertyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cOnePropertyParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Property:
		//	"Property " OneProperty ("," OneProperty)*;
		@Override public ParserRule getRule() { return rule; }

		//"Property " OneProperty ("," OneProperty)*
		public Group getGroup() { return cGroup; }

		//"Property "
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//OneProperty
		public RuleCall getOnePropertyParserRuleCall_1() { return cOnePropertyParserRuleCall_1; }

		//("," OneProperty)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//OneProperty
		public RuleCall getOnePropertyParserRuleCall_2_1() { return cOnePropertyParserRuleCall_2_1; }
	}

	public class OnePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNemoIdTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//OneProperty:
		//	NemoId ":" (STRING | INT);
		@Override public ParserRule getRule() { return rule; }

		//NemoId ":" (STRING | INT)
		public Group getGroup() { return cGroup; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_0() { return cNemoIdTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//STRING | INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class ModelPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOneModelPropertyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cOneModelPropertyParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//ModelProperty:
		//	"Property" OneModelProperty ("," OneModelProperty)*;
		@Override public ParserRule getRule() { return rule; }

		//"Property" OneModelProperty ("," OneModelProperty)*
		public Group getGroup() { return cGroup; }

		//"Property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//OneModelProperty
		public RuleCall getOneModelPropertyParserRuleCall_1() { return cOneModelPropertyParserRuleCall_1; }

		//("," OneModelProperty)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//OneModelProperty
		public RuleCall getOneModelPropertyParserRuleCall_2_1() { return cOneModelPropertyParserRuleCall_2_1; }
	}

	public class OneModelPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneModelProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNemoIdTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//OneModelProperty:
		//	(STRING | INT) ":" NemoId;
		@Override public ParserRule getRule() { return rule; }

		//(STRING | INT) ":" NemoId
		public Group getGroup() { return cGroup; }

		//STRING | INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_0() { return cSTRINGTerminalRuleCall_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//NemoId
		public RuleCall getNemoIdTerminalRuleCall_2() { return cNemoIdTerminalRuleCall_2; }
	}

	public class NewObjElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NewObj");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIMPORTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////PropertyType:'location'|'ip-prifix'|'is-enable'|'ac-info-network';
		////terminal Mac_sub: (('0'..'9')|('a'..'f'))(('0'..'9')|('a'..'f'));
		////Mac: Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub;
		////Query
		////Query:'Query' BLANK Condition BLANK 'From' BLANK (tar=[Node])|(tar=[Operation])|(tar=[Flow])|(tar=[Connection]);
		//NewObj:
		//	"CREATE" | "IMPORT";
		@Override public ParserRule getRule() { return rule; }

		//"CREATE" //PropertyType:'location'|'ip-prifix'|'is-enable'|'ac-info-network';
		////terminal Mac_sub: (('0'..'9')|('a'..'f'))(('0'..'9')|('a'..'f'));
		////Mac: Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub;
		////Query
		////Query:'Query' BLANK Condition BLANK 'From' BLANK (tar=[Node])|(tar=[Operation])|(tar=[Flow])|(tar=[Connection]); |
		//"IMPORT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }

		////PropertyType:'location'|'ip-prifix'|'is-enable'|'ac-info-network';
		////terminal Mac_sub: (('0'..'9')|('a'..'f'))(('0'..'9')|('a'..'f'));
		////Mac: Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub;
		////Query
		////Query:'Query' BLANK Condition BLANK 'From' BLANK (tar=[Node])|(tar=[Operation])|(tar=[Flow])|(tar=[Connection]);
		//"IMPORT"
		public Keyword getIMPORTKeyword_1() { return cIMPORTKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final SentenceElements pSentence;
	private final SenEnginesElements pSenEngines;
	private final Ipv4Elements pIpv4;
	private final TerminalRule tIPV4_SUB;
	private final TerminalRule tNemoId;
	private final UserElements pUser;
	private final NodeElements pNode;
	private final NodeModelElements pNodeModel;
	private final NodeOperatingElements pNodeOperating;
	private final ConnectionElements pConnection;
	private final ConnectionUpdateElements pConnectionUpdate;
	private final FlowElements pFlow;
	private final FlowUpdateElements pFlowUpdate;
	private final MatchesElements pMatches;
	private final MatchElements pMatch;
	private final OperationElements pOperation;
	private final ConditionElements pCondition;
	private final PropertyElements pProperty;
	private final OnePropertyElements pOneProperty;
	private final ModelPropertyElements pModelProperty;
	private final OneModelPropertyElements pOneModelProperty;
	private final NewObjElements pNewObj;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EditorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSentence = new SentenceElements();
		this.pSenEngines = new SenEnginesElements();
		this.pIpv4 = new Ipv4Elements();
		this.tIPV4_SUB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IPV4_SUB");
		this.tNemoId = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NemoId");
		this.pUser = new UserElements();
		this.pNode = new NodeElements();
		this.pNodeModel = new NodeModelElements();
		this.pNodeOperating = new NodeOperatingElements();
		this.pConnection = new ConnectionElements();
		this.pConnectionUpdate = new ConnectionUpdateElements();
		this.pFlow = new FlowElements();
		this.pFlowUpdate = new FlowUpdateElements();
		this.pMatches = new MatchesElements();
		this.pMatch = new MatchElements();
		this.pOperation = new OperationElements();
		this.pCondition = new ConditionElements();
		this.pProperty = new PropertyElements();
		this.pOneProperty = new OnePropertyElements();
		this.pModelProperty = new ModelPropertyElements();
		this.pOneModelProperty = new OneModelPropertyElements();
		this.pNewObj = new NewObjElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.opendaylight.nemo.tool.eclipse.plugin.Editor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	sentences+=Sentence*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Sentence:
	//	SenEngines | User | Node | NodeOperating | Connection | ConnectionUpdate | Flow | FlowUpdate | Operation;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	////Engines sentence
	//SenEngines:
	//	"Engines:" Ipv4 ("," Ipv4)* ";";
	public SenEnginesElements getSenEnginesAccess() {
		return pSenEngines;
	}
	
	public ParserRule getSenEnginesRule() {
		return getSenEnginesAccess().getRule();
	}

	//Ipv4:
	//	IPV4_SUB "." IPV4_SUB "." IPV4_SUB "." IPV4_SUB;
	public Ipv4Elements getIpv4Access() {
		return pIpv4;
	}
	
	public ParserRule getIpv4Rule() {
		return getIpv4Access().getRule();
	}

	//terminal IPV4_SUB:
	//	"0".."9" | "1".."9" "0".."9" | "1" "0".."9" "0".."9" | "2" "0".."4" "0".."9" | "25" "0".."5";
	public TerminalRule getIPV4_SUBRule() {
		return tIPV4_SUB;
	} 

	//terminal NemoId:
	//	("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "-" | "0".."9")*;
	public TerminalRule getNemoIdRule() {
		return tNemoId;
	} 

	////User
	//User:
	//	"CREATE" STRING STRING STRING ";";
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}

	//////Node
	//Node:
	//	NewObj "Node" name=NemoId ("Type" NemoId) ("Contain" nodes+=[Node|NemoId] ("," nodes+=[Node|NemoId])*)? Property? ";";
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	////NodeModel
	//NodeModel:
	//	"NodeModel" name=NemoId ModelProperty?;
	public NodeModelElements getNodeModelAccess() {
		return pNodeModel;
	}
	
	public ParserRule getNodeModelRule() {
		return getNodeModelAccess().getRule();
	}

	//NodeOperating:
	//	("UPDATE" | "DELETE") "Node" nodename+=[Node|NemoId] ("Type" NemoId)? ("Contain" nodes+=[Node|NemoId] (","
	//	nodes+=[Node|NemoId])*)? Property? ";";
	public NodeOperatingElements getNodeOperatingAccess() {
		return pNodeOperating;
	}
	
	public ParserRule getNodeOperatingRule() {
		return getNodeOperatingAccess().getRule();
	}

	////Connection
	//Connection:
	//	"CREATE" "Connection" name=NemoId "Type" NemoId ("Endnodes" endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)
	//	Property? ";";
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}

	////Connection operating
	//ConnectionUpdate:
	//	("UPDATE" | "DELETE") "Connection" connectionname+=[Connection|NemoId] ("Type" NemoId)? ("Endnodes"
	//	endnode+=[Node|NemoId] ("," endnode+=[Node|NemoId])*)? Property? ";";
	public ConnectionUpdateElements getConnectionUpdateAccess() {
		return pConnectionUpdate;
	}
	
	public ParserRule getConnectionUpdateRule() {
		return getConnectionUpdateAccess().getRule();
	}

	////flow
	//Flow:
	//	"CREATE" "Flow" name=NemoId Matches? ";";
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//FlowUpdate:
	//	("UPDATE" | "DELETE") "Flow" flowId+=[Flow|NemoId] Matches? ";";
	public FlowUpdateElements getFlowUpdateAccess() {
		return pFlowUpdate;
	}
	
	public ParserRule getFlowUpdateRule() {
		return getFlowUpdateAccess().getRule();
	}

	//Matches:
	//	"Match" Match ("," Match)*;
	public MatchesElements getMatchesAccess() {
		return pMatches;
	}
	
	public ParserRule getMatchesRule() {
		return getMatchesAccess().getRule();
	}

	//Match:
	//	NemoId ":" STRING;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}

	////Operation
	//Operation:
	//	"CREATE" "Operation" name=NemoId ("Priority" value+=INT)? "Target" targetId=[Flow|NemoId] Condition? "Action" (NemoId
	//	| NemoId ":" targetNode=[Node|NemoId]) ";";
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Condition:
	//	"Condition" STRING ("," STRING)*;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Property:
	//	"Property " OneProperty ("," OneProperty)*;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//OneProperty:
	//	NemoId ":" (STRING | INT);
	public OnePropertyElements getOnePropertyAccess() {
		return pOneProperty;
	}
	
	public ParserRule getOnePropertyRule() {
		return getOnePropertyAccess().getRule();
	}

	//ModelProperty:
	//	"Property" OneModelProperty ("," OneModelProperty)*;
	public ModelPropertyElements getModelPropertyAccess() {
		return pModelProperty;
	}
	
	public ParserRule getModelPropertyRule() {
		return getModelPropertyAccess().getRule();
	}

	//OneModelProperty:
	//	(STRING | INT) ":" NemoId;
	public OneModelPropertyElements getOneModelPropertyAccess() {
		return pOneModelProperty;
	}
	
	public ParserRule getOneModelPropertyRule() {
		return getOneModelPropertyAccess().getRule();
	}

	////PropertyType:'location'|'ip-prifix'|'is-enable'|'ac-info-network';
	////terminal Mac_sub: (('0'..'9')|('a'..'f'))(('0'..'9')|('a'..'f'));
	////Mac: Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub ':' Mac_sub;
	////Query
	////Query:'Query' BLANK Condition BLANK 'From' BLANK (tar=[Node])|(tar=[Operation])|(tar=[Flow])|(tar=[Connection]);
	//NewObj:
	//	"CREATE" | "IMPORT";
	public NewObjElements getNewObjAccess() {
		return pNewObj;
	}
	
	public ParserRule getNewObjRule() {
		return getNewObjAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
